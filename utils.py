import os
import requests
from dotenv import load_dotenv
import re

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = "deepseek/deepseek-r1-0528:free"

headers = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json",
    "Referer": "http://localhost:3000",
    "X-Title": "SEO Generator"
}

def extraer_meta_descripcion(texto: str) -> str:
    """
    Intenta extraer una l√≠nea que parezca una meta descripci√≥n (<=160 caracteres y con buena estructura).
    """
    for linea in texto.strip().splitlines():
        if 50 < len(linea.strip()) <= 160 and not linea.startswith("#"):
            return linea.strip()
    return ""

def extraer_titulo(texto: str) -> str:
    """
    Extrae el primer t√≠tulo H1 que aparece.
    """
    match = re.search(r"^# (.+)", texto, re.MULTILINE)
    return match.group(1).strip() if match else "Art√≠culo SEO"

def generar_articulo(keyword: str) -> dict:
    print("üñãÔ∏è Iniciando generaci√≥n de art√≠culo...")

    if not OPENROUTER_API_KEY:
        print("‚ùå API Key no encontrada.")
        return {}

    prompt = f"""
Act√∫a como un redactor SEO. Escribe un art√≠culo optimizado en formato Markdown para la keyword: "{keyword}".

Sigue esta estructura comprimida:
- Un t√≠tulo H1 claro y atractivo
- Introducci√≥n con 1 solo p√°rrafo breve (m√°x. 3 l√≠neas)
- 3 secciones H2 con subt√≠tulos H3. Usa frases concisas (2-3 l√≠neas por subt√≠tulo)
- 3 FAQs con preguntas y respuestas cortas (2 l√≠neas m√°x cada una)
- Una meta descripci√≥n clara al final (160 caracteres)
- Un blockquote que resuma el art√≠culo en una sola frase

Usa subt√≠tulos claros y contenido enfocado en la intenci√≥n de b√∫squeda.

Devuelve solo el art√≠culo en formato Markdown sin explicaci√≥n.
"""

    data = {
        "model": OPENROUTER_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1400
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        print(f"üì• Status code: {response.status_code}")

        if response.status_code != 200:
            print("‚ùå Respuesta inv√°lida de OpenRouter.")
            return {}

        result = response.json()
        print("üì§ Respuesta JSON completa:")
        print(result)

        if "choices" not in result:
            print("‚ùå La respuesta no contiene 'choices'.")
            return {}

        content = result["choices"][0]["message"]["content"]
        title = extraer_titulo(content)
        meta = extraer_meta_descripcion(content)

        return {
            "title": title,
            "content": content,
            "meta_description": meta
        }

    except Exception as e:
        print(f"‚ùå Error al generar art√≠culo: {e}")
        return {}

