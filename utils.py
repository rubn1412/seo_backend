import os
import requests
from dotenv import load_dotenv
import markdown  # Para convertir Markdown a HTML
import re
import json

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = "deepseek/deepseek-r1-0528:free"

headers = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json",
    "Referer": "http://localhost:3000",
    "X-Title": "SEO Generator"
}



def generar_articulo_individual(keyword: str) -> dict:
    print("üñãÔ∏è Generando un art√≠culo individual...")

    prompt = f"""
Eres un generador de contenido SEO. Tu tarea es crear una idea de art√≠culo long-tail espec√≠fica basada en la keyword: "{keyword}".

Devuelve exclusivamente un JSON v√°lido como este:
{{
  "title": "Zapatos c√≥modos para mujeres con pies anchos",
  "content": "Elegir zapatos adecuados para pies anchos es esencial para la comodidad diaria. Aqu√≠ te mostramos opciones pr√°cticas..."
}}

Reglas:
- NO escribas nada fuera del JSON.
- El campo "title" debe ser una variaci√≥n long-tail de la keyword.
- El campo "content" debe tener 2-3 p√°rrafos.
- No uses Markdown, ni etiquetas, ni texto adicional.
"""

    data = {
        "model": OPENROUTER_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.9,
        "max_tokens": 1024
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        print(f"üì• Status code: {response.status_code}")
        response.raise_for_status()

        content = response.json()["choices"][0]["message"]["content"].strip()

        # Validaci√≥n simple antes del parseo
        if not content.startswith("{") or not content.endswith("}"):
            print("‚ùå La respuesta no es un JSON v√°lido.")
            return {}

        article = json.loads(content)
        return article

    except Exception as e:
        print(f"‚ùå Error al procesar la respuesta: {e}")
        return {}

