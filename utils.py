import os
import requests
from dotenv import load_dotenv
import re

load_dotenv()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = "deepseek/deepseek-r1-0528:free"

headers = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json",
    "Referer": "http://localhost:3000",
    "X-Title": "SEO Generator"
}

def extraer_meta_descripcion(texto: str) -> str:
    for linea in reversed(texto.strip().splitlines()):
        if 50 < len(linea.strip()) <= 160 and not linea.startswith("#"):
            return linea.strip()
    return ""

def extraer_titulo(texto: str) -> str:
    # Buscar l√≠nea que empiece con exactamente un '# '
    for linea in texto.strip().splitlines():
        if linea.strip().startswith("# "):
            return linea.strip("# ").strip()

    # Si no se encuentra, usar la primera l√≠nea no vac√≠a
    for linea in texto.strip().splitlines():
        if linea.strip():
            return linea.strip()

    return "Art√≠culo SEO"


def generar_articulo(keyword: str) -> dict:
    print("üñãÔ∏è Iniciando generaci√≥n de art√≠culo...")

    if not OPENROUTER_API_KEY:
        print("‚ùå API Key no encontrada.")
        return {}

    prompt = f"""
Act√∫a como un redactor SEO profesional. Escribe un art√≠culo completo y bien estructurado usando **formato Markdown simple**, optimizado para la palabra clave: "{keyword}".

### Instrucciones:
- No uses bloques de c√≥digo (no encierres el contenido entre triple backtick ```).
- No agregues etiquetas HTML ni encabezados externos.
- Entrega directamente el contenido como texto plano en formato Markdown.

### Estructura solicitada:
- Un t√≠tulo H1 claro, llamativo y optimizado.
- Una introducci√≥n breve (m√°x. 3 l√≠neas).
- Tres secciones principales con H2, cada una con subt√≠tulos H3.
  - Usa p√°rrafos breves y frases concisas (2-3 l√≠neas por subt√≠tulo).
- Una secci√≥n de 3 preguntas frecuentes (FAQs) con respuestas de 2 l√≠neas cada una.
- Un blockquote final que resuma el art√≠culo en una sola frase poderosa.
- Una conclusi√≥n clara.
- Finalmente, al final del todo, agrega una meta descripci√≥n (m√°x. 160 caracteres, una sola l√≠nea).

Aseg√∫rate de completar todo el art√≠culo antes de enviarlo.
"""

    data = {
        "model": OPENROUTER_MODEL,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 2000  # Aumentado para evitar cortes
    }

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        print(f"üì• Status code: {response.status_code}")

        if response.status_code != 200:
            print("‚ùå Respuesta inv√°lida de OpenRouter.")
            return {}

        result = response.json()
        print("üì§ Respuesta JSON completa:")
        print(result)

        if "choices" not in result:
            print("‚ùå La respuesta no contiene 'choices'.")
            return {}

        content = result["choices"][0]["message"]["content"]
        title = extraer_titulo(content)
        meta = extraer_meta_descripcion(content)

        return {
            "title": title,
            "content": content,
            "meta_description": meta
        }

    except Exception as e:
        print(f"‚ùå Error al generar art√≠culo: {e}")
        return {}

